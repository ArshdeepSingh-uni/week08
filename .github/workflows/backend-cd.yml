# week08/.github/workflows/backend_cd.yml
name: Backend CD - Deploy Backend Services to AKS

on:
  # Only manual trigger (you decide when to run CD)
  workflow_dispatch:

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    environment: Production
    
    outputs:
      PRODUCT_API_IP: ${{ steps.get_product_ip.outputs.external_ip }}
      ORDER_API_IP: ${{ steps.get_order_ip.outputs.external_ip }}

    steps:
      # Step 1: Checkout repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Azure login with Service Principal
      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 3: Set AKS context
      - name: Set Kubernetes context (get AKS credentials)
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.RESOURCE_GROUP }}
          cluster-name: ${{ secrets.CLUSTER_NAME }}

      # Step 4: Attach ACR to AKS
      - name: Attach ACR to AKS
        run: |
          az aks update \
            --name ${{ secrets.CLUSTER_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --attach-acr ${{ secrets.REGISTRY_NAME }}

      # Step 5: Deploy infra
      - name: Deploy Backend Infrastructure (Namespace, ConfigMaps, Secrets, Databases)
        run: |
          kubectl apply -f k8s/configmaps.yaml
          kubectl apply -f k8s/secrets.yaml
          kubectl apply -f k8s/product-db.yaml
          kubectl apply -f k8s/order-db.yaml

      # Step 6: Deploy services (with updated image tags)
      - name: Deploy Backend Microservices (Product, Order)
        run: |
          # Apply base manifests
          kubectl apply -f k8s/product-service.yaml
          kubectl apply -f k8s/order-service.yaml

          # Force update deployments with the latest images from ACR
          kubectl set image deployment/product-service-w08e1 product-container=${{ secrets.REGISTRY_NAME }}.azurecr.io/product_service:latest --record
          kubectl set image deployment/order-service-w08e1 order-container=${{ secrets.REGISTRY_NAME }}.azurecr.io/order_service:latest --record

      # Step 7: Wait for LoadBalancer IPs
      - name: Wait for Backend LoadBalancer IPs
        run: |
          echo "Waiting for Product and Order LoadBalancer IPs..."
          for i in {1..60}; do
            PRODUCT_IP=$(kubectl get service product-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            ORDER_IP=$(kubectl get service order-service-w08e1 -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)

            if [[ -n "$PRODUCT_IP" && -n "$ORDER_IP" ]]; then
              echo "✅ Product Service IP: $PRODUCT_IP"
              echo "✅ Order Service IP: $ORDER_IP"
              echo "PRODUCT_IP=$PRODUCT_IP" >> $GITHUB_ENV
              echo "ORDER_IP=$ORDER_IP" >> $GITHUB_ENV
              break
            fi
            echo "Retrying in 5s..."
            sleep 5
          done

          if [[ -z "$PRODUCT_IP" || -z "$ORDER_IP" ]]; then
            echo "❌ Error: One or more LoadBalancer IPs not assigned after timeout."
            exit 1
          fi

      # Step 8: Capture outputs
      - name: Capture Product Service IP for Workflow Output
        id: get_product_ip
        run: echo "external_ip=${{ env.PRODUCT_IP }}" >> $GITHUB_OUTPUT
      
      - name: Capture Order Service IP for Workflow Output
        id: get_order_ip
        run: echo "external_ip=${{ env.ORDER_IP }}" >> $GITHUB_OUTPUT

      # Step 9: Logout
      - name: Logout from Azure
        run: az logout
